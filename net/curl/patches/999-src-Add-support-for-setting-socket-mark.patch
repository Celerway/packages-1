From 1190ca708cf629817703939074a9d3775f1ebafa Mon Sep 17 00:00:00 2001
From: Kristian Evensen <kristian.evensen@gmail.com>
Date: Wed, 15 Dec 2021 14:37:11 +0000
Subject: [PATCH] src: Add support for setting mark

---
 include/curl/curl.h |  3 +++
 lib/connect.c       | 11 +++++++++++
 lib/setopt.c        | 12 ++++++++++++
 lib/urldata.h       |  1 +
 src/tool_cfgable.h  |  1 +
 src/tool_getparam.c | 14 ++++++++++++--
 src/tool_operate.c  |  3 +++
 7 files changed, 43 insertions(+), 2 deletions(-)

diff --git a/include/curl/curl.h b/include/curl/curl.h
index 6b6ac8a05..919d3819f 100644
--- a/include/curl/curl.h
+++ b/include/curl/curl.h
@@ -2132,6 +2132,9 @@ typedef enum {
    * (in seconds) */
   CURLOPT(CURLOPT_MAXLIFETIME_CONN, CURLOPTTYPE_LONG, 314),
 
+  /* Set mark on packets */
+  CURLOPT(CURLOPT_SOCKET_MARK, CURLOPTTYPE_LONG, 315),
+
   CURLOPT_LASTENTRY /* the last unused */
 } CURLoption;
 
diff --git a/lib/connect.c b/lib/connect.c
index af6094731..5204bd61d 100644
--- a/lib/connect.c
+++ b/lib/connect.c
@@ -1628,6 +1628,17 @@ CURLcode Curl_socket(struct Curl_easy *data,
   }
 #endif
 
+#ifdef SO_MARK
+  if(data->set.socket_mark) {
+    int optval = (int) data->set.socket_mark;
+    if(setsockopt(*sockfd, SOL_SOCKET, SO_MARK, (void *) &optval,
+       sizeof(optval))) {
+      close(*sockfd);
+      return CURLE_COULDNT_CONNECT;
+    }
+  }
+#endif
+
   return CURLE_OK;
 }
 
diff --git a/lib/setopt.c b/lib/setopt.c
index 56d9c4992..7e45d8a7d 100644
--- a/lib/setopt.c
+++ b/lib/setopt.c
@@ -3029,6 +3029,18 @@ CURLcode Curl_vsetopt(struct Curl_easy *data, CURLoption option, va_list param)
   case CURLOPT_PREREQDATA:
     data->set.prereq_userp = va_arg(param, void *);
     break;
+
+#ifdef SO_MARK
+  case CURLOPT_SOCKET_MARK:
+    uarg = va_arg(param, unsigned long);
+#if SIZEOF_LONG > 4
+    if(uarg > UINT_MAX)
+      return CURLE_BAD_FUNCTION_ARGUMENT;
+#endif
+    data->set.socket_mark = (unsigned int)uarg;
+    break;
+#endif
+
   default:
     /* unknown tag and its companion, just ignore: */
     result = CURLE_UNKNOWN_OPTION;
diff --git a/lib/urldata.h b/lib/urldata.h
index 22068882f..c0aafe9b7 100644
--- a/lib/urldata.h
+++ b/lib/urldata.h
@@ -1778,6 +1778,7 @@ struct UserDefined {
                                                   before resolver start */
   void *resolver_start_client; /* pointer to pass to resolver start callback */
   long upkeep_interval_ms;      /* Time between calls for connection upkeep. */
+  long socket_mark;		/* Mark to set on all packets. */
   multidone_func fmultidone;
   struct Curl_easy *dohfor; /* this is a DoH request for that transfer */
   CURLU *uh; /* URL handle for the current parsed URL */
diff --git a/src/tool_cfgable.h b/src/tool_cfgable.h
index eff55f95d..f4697096a 100644
--- a/src/tool_cfgable.h
+++ b/src/tool_cfgable.h
@@ -287,6 +287,7 @@ struct OperationConfig {
                                      0 is valid. default: CURL_HET_DEFAULT. */
   bool haproxy_protocol;          /* whether to send HAProxy protocol v1 */
   bool disallow_username_in_url;  /* disallow usernames in URLs */
+  long socket_mark;               /* Assign mark to packet */
   char *aws_sigv4;
   struct GlobalConfig *global;
   struct OperationConfig *prev;
diff --git a/src/tool_getparam.c b/src/tool_getparam.c
index 1fe7d5d09..d1093997d 100644
--- a/src/tool_getparam.c
+++ b/src/tool_getparam.c
@@ -320,6 +320,7 @@ static const struct LongShort aliases[]= {
   {"R",  "remote-time",              ARG_BOOL},
   {"s",  "silent",                   ARG_BOOL},
   {"S",  "show-error",               ARG_BOOL},
+  {"Sm", "socket-mark",              ARG_STRING},
   {"t",  "telnet-option",            ARG_STRING},
   {"T",  "upload-file",              ARG_FILENAME},
   {"u",  "user",                     ARG_STRING},
@@ -2115,8 +2116,17 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         global->showerror = (!toggle)?TRUE:FALSE; /* toggle off */
       break;
     case 'S':
-      /* show errors */
-      global->showerror = toggle?1:0; /* toggle on if used with -s */
+      switch (subletter) {
+      case '\0':
+        /* show errors */
+        global->showerror = toggle?1:0; /* toggle on if used with -s */
+        break;
+      case 'm':
+        err = str2num(&config->socket_mark, nextarg);
+        if(err)
+          return err;
+        break;
+      }
       break;
     case 't':
       /* Telnet options */
diff --git a/src/tool_operate.c b/src/tool_operate.c
index ed3b2f56a..f3c922d59 100644
--- a/src/tool_operate.c
+++ b/src/tool_operate.c
@@ -2060,6 +2060,9 @@ static CURLcode single_transfer(struct GlobalConfig *global,
         if(config->altsvc)
           my_setopt_str(curl, CURLOPT_ALTSVC, config->altsvc);
 
+        if(config->socket_mark)
+          my_setopt(curl, CURLOPT_SOCKET_MARK, config->socket_mark);
+
         if(config->hsts)
           my_setopt_str(curl, CURLOPT_HSTS, config->hsts);
 
-- 
2.30.2

