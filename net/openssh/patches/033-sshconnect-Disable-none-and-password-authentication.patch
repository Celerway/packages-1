From 01ec33ffb75a66244f61a8fe07dc863dc5a7247b Mon Sep 17 00:00:00 2001
From: Kristian Evensen <kristian.evensen@gmail.com>
Date: Thu, 16 Dec 2021 12:06:47 +0000
Subject: [PATCH] sshconnect: Disable none and password authentication

This commit disables support for the "none" and "password"
authentication in OpenSSH (we only use public key authentiation in our
tools). The motivation behind this change is to avoid one class of MITM
attacks. By setting up a rogue SSH server with authentication disabled
(and redirecting traffic to ssh.nimbus.celerway.com), our router would
connect to this server due to default behavior of OpenSSH.

Disabling password authentication was as easy as removing it from the
list of authentication methods. Disabling none, on the other hand,
required more effort. OpenSSH will always try none, so we had to change
the code which selects the initial authentication method (in
ssh_userauth2). In addition, input_userauth_service_accept() had to be
extended to handle errors setting up authentcation.
---
 sshconnect2.c | 26 ++++++++++++++++++++------
 1 file changed, 20 insertions(+), 6 deletions(-)

diff --git a/sshconnect2.c b/sshconnect2.c
index fea50fab..69adfc43 100644
--- a/sshconnect2.c
+++ b/sshconnect2.c
@@ -372,7 +372,7 @@ static int input_userauth_info_req(int, u_int32_t, struct ssh *);
 static int input_userauth_pk_ok(int, u_int32_t, struct ssh *);
 static int input_userauth_passwd_changereq(int, u_int32_t, struct ssh *);
 
-static int userauth_none(struct ssh *);
+//static int userauth_none(struct ssh *);
 static int userauth_pubkey(struct ssh *);
 static int userauth_passwd(struct ssh *);
 static int userauth_kbdint(struct ssh *);
@@ -422,7 +422,7 @@ Authmethod authmethods[] = {
 		NULL,
 		&options.kbd_interactive_authentication,
 		&options.batch_mode},
-	{"password",
+/*	{"password",
 		userauth_passwd,
 		NULL,
 		&options.password_authentication,
@@ -431,7 +431,7 @@ Authmethod authmethods[] = {
 		userauth_none,
 		NULL,
 		NULL,
-		NULL},
+		NULL},*/
 	{NULL, NULL, NULL, NULL, NULL}
 };
 
@@ -452,8 +452,8 @@ ssh_userauth2(struct ssh *ssh, const char *local_user,
 	authctxt.host = host;
 	authctxt.service = "ssh-connection";		/* service name */
 	authctxt.success = 0;
-	authctxt.method = authmethod_lookup("none");
 	authctxt.authlist = NULL;
+	authctxt.method = authmethod_get(authctxt.authlist);
 	authctxt.methoddata = NULL;
 	authctxt.sensitive = sensitive;
 	authctxt.active_ktype = authctxt.oktypes = authctxt.ktypes = NULL;
@@ -501,6 +501,7 @@ ssh_userauth2(struct ssh *ssh, const char *local_user,
 static int
 input_userauth_service_accept(int type, u_int32_t seq, struct ssh *ssh)
 {
+	Authctxt *authctxt = (Authctxt *)ssh->authctxt;
 	int r;
 
 	if (ssh_packet_remaining(ssh) > 0) {
@@ -517,8 +518,21 @@ input_userauth_service_accept(int type, u_int32_t seq, struct ssh *ssh)
 		goto out;
 	debug("SSH2_MSG_SERVICE_ACCEPT received");
 
-	/* initial userauth request */
-	userauth_none(ssh);
+	for (;;) {
+		debug("Authentication method to try %s",
+		      authctxt->method->name);
+
+		if (!authctxt->method->userauth(ssh)) {
+			authctxt->method->enabled = NULL;
+			authctxt->method = authmethod_get(authctxt->authlist);
+
+			if (!authctxt->method) {
+				fatal("No authentication methods left to try.");
+			}
+		} else {
+			break;
+		}
+	}
 
 	ssh_dispatch_set(ssh, SSH2_MSG_EXT_INFO, &input_userauth_error);
 	ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_SUCCESS, &input_userauth_success);
-- 
2.30.2

